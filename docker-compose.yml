# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

version: '3'

# Define services
services:
  # Frontend Service
  app-client:
    build:
      context: frontend
      dockerfile: Dockerfile
      args:
        - API_SERVER=${ENV_API_SERVER}
    volumes:
      - react_static_volume:/usr/src/app/build/static
    expose:
      - 3000
    env_file:
      - .env
    command: serve -s build -l 3000
    depends_on:
      - app-server
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: backend
      dockerfile: Dockerfile
    volumes:
      - spring_boot_static_volume:/usr/src/app/static
    expose:
      - 8080
    command: gunicorn mainapp.wsgi:application --bind 0.0.0.0:8000
    depends_on:
      - db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${DB_NAME}?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}

  # Database Service (Postgresql)
  db:
    image: "postgres"
    container_name: "postgres"
    ports:
      - "5432:5432" # Forward the exposed port 5432 on the container to port 5432 on the host machine
    restart: always
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_ROOT_PASSWORD:${DB_ROOT_PASSWORD}
    volumes:
      - db-data:/var/lib/postgresql/data

  nginx:
    restart: always
    build: ./nginx
    volumes:
      - spring_boot_static_volume:/usr/src/app/spring_boot_files/static
      - react_static_volume:/usr/src/app/react_files/static
    ports:
      - 80:80
    depends_on:
      - app-client

# Volumes
volumes:
  db-data:
  react_static_volume:
  spring_boot_static_volume:
